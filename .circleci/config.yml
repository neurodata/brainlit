version: 2.1

orbs:
  # The python orb contains a set of prepackaged circleci configuration you can use repeatedly in your configurations files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.4.0
  codecov: codecov/codecov@3.2.3

workflows:
  build_and_deploy:  # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run. 
    # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows 
    jobs:
      - build-and-test_38
      - build-and-test_39
      - build-and-test_310

# Below I define commands that are used in many of the jobs
commands:
  early_return_for_forked_pull_requests:
    description: >-
      If this build is from a fork, stop executing the current job and return success.
      This is useful to avoid steps that will fail due to missing credentials.
    steps:
      - run:
          name: Early return if this build is from a forked PR
          command: |
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
              echo "Nothing to do for forked PRs, so marking this step successful"
              circleci step halt
            fi
            
  python_build:
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If you're requirements.txt isn't in the root directory.
          # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      - run:
          name: aws key
          command: |
           bash ./.aws.sh
      - run:
          name: install python dependencies
          # This assumes pytest is installed via the install-package step above
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            pip install pytest pytest-cov black[jupyter]
            pip install -e .
  fork_test:
    steps:
      - run:
          name: formatting and code coverage
          # This assumes pytest is installed via the install-package step above
          command: |
            . venv/bin/activate
            black --check --diff ./brainlit ./experiments
            pytest brainlit/algorithms/ brainlit/feature_extraction/ brainlit/BrainLine brainlit/napari_viterbrain/ brainlit/preprocessing/ brainlit/viz/
  all_test:
    steps:
      - run:
          name: run pytests
          # This assumes pytest is installed via the install-package step above
          command: |
            . venv/bin/activate
            pytest --cov=brainlit --cov-report=xml ./brainlit
            
jobs:
  build-and-test_38:  # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.8 container
    # Change the version below to your required version of python
    docker:
      - image: cimg/python:3.8
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - python_build
      # - fork_test # commented bc this is done via github actions
      - early_return_for_forked_pull_requests
      - all_test
      
  build-and-test_39:
    docker:
      - image: cimg/python:3.9
    steps:
      - python_build
      # - fork_test # commented bc this is done via github actions
      - early_return_for_forked_pull_requests
      - all_test
      
  build-and-test_310:
    docker:
      - image: cimg/python:3.10
    steps:
      - python_build
      # - fork_test # commented bc this is done via github actions
      - early_return_for_forked_pull_requests
      - all_test
      - codecov/upload

    

